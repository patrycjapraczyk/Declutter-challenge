,comments
0," LOGGER.debug(""Mode LINK"");"
1, VBox contextPanel = new VBox(10);
2, for (int j = 0; j < markers.length; j++) {
3, BibEntry firstEntry = entries.get(0);
4,        btnConnect.disableProperty().bind(viewModel.formValidation().validProperty().not());
5,        }
6, ExternalFileType found = null;
7,        mainStage.showingProperty().addListener(new ChangeListener<Boolean>() {
8, BackgroundTask
9,                    defTypes.remove(found);
10, return;
11,        m_modifiedSubtree.clear();
12, public void toggle(SidePaneType type) {
13, @FunctionalInterface
14," TABLE_ICONS.put(StandardField.PDF, icon);"
15, List<ExternalFileType> types = new ArrayList<>(getDefaultExternalFileTypes());
16," LOGGER.info(""Cannot rename string '"" + mem + ""' to '"" + disk + ""' because the name """
17, public Optional<ExternalFileType> getExternalFileTypeByName(String name) {
18,        database.getDatabase().insertEntries(entries);
19,public class NewSubLibraryAction extends SimpleCommand {
20, private void startSearch() {
21, public boolean isGeneratedNameSameAsOriginal() {
22,"                    fieldChanges.add(new FieldChangeViewModel(field, memEntry, tmpEntry, mem.orElse(null), tmp.get(), disk.get()));"
23,public class JabRefExecutorService {
24,"        getOpenDatabaseAction().openFile(file, true);"
25, public void requestFocus(Field fieldName) {
26, public void setPasteActionHandler(PasteActionHandler handler) {
27, private void onSelectedGroupChanged(ObservableList<GroupNodeViewModel> newValue) {
28, for (BibEntry entry : pr.getDatabase().getEntries()) {
29, private GridPane getSelectorPanel() {
30, private void onActiveDatabaseChanged(Optional<BibDatabaseContext> newDatabase) {
31," String[] cmd = (application != null) && !application.isEmpty() ? new String[] {""/usr/bin/open"", ""-a"","
32,        keywordGroupSearchField.setText(prefs.get(JabRefPreferences.GROUPS_DEFAULT_FIELD));
33,                    clonedEntry.getField(StandardField.CROSSREF).ifPresent(crossref -> {
34," SpecialFieldViewModel printedViewModel = new SpecialFieldViewModel(SpecialField.PRINTED, undoManager);"
35, private String[] getStringArrayRepresentation(ExternalFileType type) {
36, String newText = abbreviation.getName();
37, public void writeOrCreate() throws IOException {
38, private static Image getImageFX(String name) {
39,            root.setSelected(true);
40, GlobalBibtexKeyPattern keypatterns = getKeyPatternAsGlobalBibtexKeyPattern();
41," TABLE_ICONS.put(fileType.getField(), icon);"
42, public static Supplier<List<MenuItem>> getNameMenu(final TextInputControl textInput) {
43,"                        uniquefiers.put(key, String.valueOf((char) uniq));"
44, for (Iterator<Path> iterator = filesToOpen.iterator(); iterator.hasNext();) {
45, public void automatedImport(List<String> filenames) {
46, if ((directory == null) || !directory.exists() || !directory.isDirectory()) {
47,        stateManager.activeDatabaseProperty().bind(
48," QUALITY_ASSURED(MaterialDesignIcon.CERTIFICATE), /*css: certificate */"
49," TABLE_ICONS.put(StandardField.FILE, icon);"
50, if (filenames.isEmpty()) {
51,"        addToGroups(entries, stateManager.getSelectedGroup(database));"
52, private final int m_subtreeRootChildCount;
53, public void searchButtonClicked() {
54, // FIXME: prefix can be removed?!
55, public boolean delete() {
56," switch (ControlHelper.getDroppingMouseLocation(row, event)) {"
57, if (panel == null) {
58,public class ExporterViewModel {
59,class BibtexKeyPatternPrefTab extends BibtexKeyPatternPanel implements PreferencesTab {
60,"        xSet.insert(xImpLoader.activate(""com.sun.star.comp.loader.JavaLoader"", null, null, null));"
61," final Timer searchTask = FxTimer.create(Duration.ofMillis(400), () -> {"
62, VBox explicitPanel = createOptionsExplicitGroup();
63,public class ThemeLoader {
64, BackgroundTask
65,        button.graphicProperty().unbind();
66,                }
67,public class GuiAppender extends AbstractAppender {
68, switch (mouseLocation) {
69, public static void openFolderAndSelectFile(Path fileLink) throws IOException {
70," private static Map<String, String> readIconThemeFile(URL url, String prefix) {"
71,public class UndoableRemoveEntry extends AbstractUndoableJabRefEdit {
72," boolean isModifiedLocally = (DuplicateCheck.compareEntriesStrictly(memEntry, tmpEntry) <= 1);"
73, if (Globals.prefs == null) {
74, public BibEntry getMergeEntry() {
75, public void focus() {
76, public abstract boolean shouldShow(BibEntry entry);
77,            basePanel.getUndoManager().registerListener(new UndoRedoEventManager());
78," TABLE_ICONS.put(StandardField.EPRINT, icon);"
79, void operationCompleted();
80," public UndoableAddOrRemoveGroup(GroupTreeNodeViewModel groupsRoot,"
81, try {
82,"        xSet.insert(xImpLoader.activate(""com.sun.star.comp.connections.Acceptor"", null, null, null));"
83,    }
84, List<Integer> num = new ArrayList<>(keys.length);
85," ParserResult pr = importer.get().importDatabase(filename, Globals.prefs.getDefaultEncoding());"
86, XComponentContext xContext = org.jabref.gui.openoffice.Bootstrap.bootstrap(loader);
87, private final int m_editType;
88, HBox fontBox = new HBox();
89," LOGGER.debug(""Mode MOVE"");"
90,public class EntryEditor extends BorderPane {
91,        setupKeyBindings(keyBindingRepository);
92," return new ReadOnlyStringWrapper("""");"
93, Exporter defaultChoice = exporters.stream()
94, int uniq = 'a';
95,"public class ViewModelTableRowFactory<S> implements Callback<TableView<S>, TableRow<S>> {"
96, OS.NEWLINE = Globals.prefs.get(JabRefPreferences.NEWLINE);
97, for (String key : cited) {
98," String sConnect = ""uno:socket,host=localhost,port=2083"" + "";urp;StarOffice.ComponentContext"";"
99, protected static String processPreview(List<String> citations) {
100,"            populateSubMenu(items, ""IEEETran"", IEEETranEntryTypeDefinitions.ALL, entry, undoManager);"
101,            visibleComponents.sort(new PreferredIndexSort());
102, List<String> getRestartWarnings();
103," ParserResult parserResult = OpenDatabase.loadDatabase(file.toFile(),"
104," List<String> dir = databaseContext.getFileDirectories(field, Globals.prefs.getFilePreferences());"
105,        annotationList.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
106," public static XComponentContext createInitialComponentContext(Map<String, Object> context_entries) throws Exception {"
107, switch (m_editType) {
108, private void generateKeys(List<BibEntry> entries) {
109,public class HelpAction extends SimpleCommand {
110, List<LinkedFile> filesToSerialize = files.stream()
111," public <T> void putValue(Class<T> type, T value) {"
112," XComponentContext xLocalContext = createInitialComponentContext((Map<String, Object>) null);"
113,        anySelectedEntriesMatched.invalidate();
114, private Optional<BibEntry> findInternalDuplicate(BibEntry entry) {
115, if (!toRemove.isEmpty()) {
116," for (Map.Entry<String, Set<Field>> tab : entryEditorPreferences.getEntryEditorTabList().entrySet()) {"
117,public final class EntryEditorTabList {
118,public class ExternalFileTypes {
119, boolean hadBibSection = getBookmarkRange(OOBibBase.BIB_SECTION_NAME) != null;
120," boolean success = saveDatabase(targetPath, false,"
121,public interface PushToApplication {
122,"public class OpenHyperlinksInExternalBrowser implements ChangeListener<Worker.State>, EventListener {"
123,"public class ViewModelTreeTableCellFactory<S> implements Callback<TreeTableColumn<S, S>, TreeTableCell<S, S>> {"
124, public static URL getIconUrl(String name) {
125,"        browser.addEventFilter(javafx.scene.input.MouseEvent.ANY, javafx.scene.input.MouseEvent::consume);"
126,            correctEntries = entries;
127, for (Observable observable : newEntry.getObservables()) {
128, public SuggestionProviders() {
129,public class NoSelectionModel<T> extends MultipleSelectionModel<T> {
130, public void moveDown(SidePaneComponent comp) {
131,        }
132, Set<Field> jointFields = new TreeSet<>(Comparator.comparing(Field::getName));
133,public class RelatedArticlesTab extends EntryEditorTab {
134, GroupTreeNode node = newParent.getChildAt(newChildIndex).get(); //TODO: Null
135,public class TemporalAccessorPicker extends DatePicker {
136,public abstract class SimpleCommand extends CommandBase {
137," NamedCompound ce = new NamedCompound(Localization.lang(""Merge entries""));"
138, Optional<String> valInNewField = entry.getField(newField);
139,    }
140,public class AbbreviationViewModel {
141,    }
142,        }
143,public enum DroppingMouseLocation {
144, @Override
145, this.frame = frame;
146,public class UnlinkedFilesCrawler extends BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> {
147,            fields.addAll(entry.getFields());
148,
149, public List<BasePanel> getBasePanelList() {
150,        entriesSorted = new SortedList<>(entriesFiltered);
151," private ScrollPane getRelatedArticleInfo(List<BibEntry> list, MrDLibFetcher fetcher) {"
152,        base.removeString(string.getId());
153," public List<String> refreshCiteMarkers(List<BibDatabase> databases, OOBibStyle style)"
154,        }
155, GroupTreeNode newNode = m_subtreeBackup.copySubtree();
156, private void openFile(Path filePath) {
157," Class<?> clazz = Class.forName(""javafx.scene.control.TableUtil"");"
158,            }
159,public class ContentSelectorSuggestionProvider implements AutoCompleteSuggestionProvider<String> {
160, try {
161,        setPrefHeight(Double.POSITIVE_INFINITY);
162,        tearDownJabRef(filenames);
163, try {
164," XNamed xNamed = UnoRuntime.queryInterface(XNamed.class, bookmark);"
165, @Override
166,    }
167," public static final String FRAME_TITLE = ""JabRef"";"
168, protected boolean couldNotConnect; // Set to true in case the tunnel to the program (if one is used) does not operate
169,            row.contextMenuProperty().bind(
170,public class CitationStyleToClipboardWorker {
171,public class CustomExternalFileType implements ExternalFileType {
172, if (!sb.toString().trim().isEmpty()) {
173, catch (IOException excep) {
174,public class UnlinkedPDFFileFilter implements FileFilter {
175, List<BibEntry> toRemove = new ArrayList<>(entries.size());
176,public enum AutoCompleteFirstNameMode {
177," private List<Integer> findCitedEntryIndex(String citRefName, List<String> keys) {"
178,    }
179,public class ManageJournalAbbreviationsViewModel extends AbstractViewModel {
180, public void show(SidePaneType type) {
181, if (bibtexResult == null) {
182,public class OpenDatabaseAction extends SimpleCommand {
183," TABLE_ICONS.put(SpecialField.PRIORITY, icon);"
184, if (!identicalTypes && !typeRadioButtons.isEmpty() && typeRadioButtons.get(0).isSelected()) {
185, if (this.stringConverter == null) {
186," public void installCss(Scene scene, JabRefPreferences preferences) {"
187,        getGroupNode().moveTo(target.getGroupNode());
188, return pathname -> true;
189, private final Version installedVersion;
190, if (strippedLink.substring(strippedLinkIndex + 1).indexOf('/') >= 1) {
191, public void setupAllTables() {
192,            notifyNewSelectedFile(currentFile);
193,                }
194, Platform.runLater(() -> {
195," String[] keys = citeMatcher.group(2).split("","");"
196," String howToReproduce = ""Steps to reproduce:\n\n1. ...\n2. ...\n3. ..."";"
197,                        pr.getDatabase().clearSharedDatabaseID();
198," ENTRY_EDITOR_PREVIOUS_PANEL_2(""Entry editor, previous panel 2"", Localization.lang(""Entry editor, previous panel 2""), ""ctrl+MINUS"", KeyBindingCategory.VIEW),"
199,            stateManager.activeSearchQueryProperty().set(newBasePanel.getCurrentSearchQuery());
200, StackPane helpButtonContainer = new StackPane();
201, private final int m_subtreeRootChildCount;
202," private static UndoableEdit massRenameField(Collection<BibEntry> entries, Field field, Field newField,"
203, public static final int REMOVE_NODE_KEEP_CHILDREN = 1;
204," public boolean dragDropped(ListProperty<PreviewLayout> targetList, Dragboard dragboard) {"
205," FETCH_FULLTEXT(MaterialDesignIcon.MAGNIFY), // TODO: use WEB_SEARCH instead as soon as it is available"
206, @Override
207, public String getDefaultKeyBinding() {
208,"            dialogService.notify(Localization.lang(""Added group \""%0\""."", group.getName()));"
209," new LatexFieldFormatter(fieldFormatterPreferences).format(newValue, fieldName);"
210, ControlsFxVisualizer visualizer = new ControlsFxVisualizer();
211, if (nameChange) {
212, if (!result.getToAdd().isEmpty()) {
213,"            markingContent = markingContent.replaceAll(""-"" + NEWLINE, """");"
214," public <T> BackgroundTask<T> thenRun(Function<V, T> nextOperation) {"
215,public class CheckForNewEntryTypesAction implements GUIPostOpenAction {
216," private void openTheFile(Path file, boolean raisePanel) {"
217,"        entryEditorTabs.add(new OtherFieldsTab(databaseContext, panel.getSuggestionProviders(), undoManager,"
218,        entriesList = databaseContext.getDatabase().getEntries();
219,public class FindFullTextAction extends SimpleCommand {
220,public class CustomizeExternalFileTypesDialog extends BaseDialog<Void> {
221, ToggleGroup groupType = new ToggleGroup();
222,public abstract class BackgroundTask<V> {
223, protected abstract void bindToEntry(BibEntry entry);
224, Object context = xUrlResolver.resolve(sConnect);
225, if (dataBaseNumber >= 0) {
226," new PersistenceVisualStateTable(this, Globals.prefs);"
227,public class AutosaveUIManager {
228," UpdateField.setAutomaticFields(entries, updateFieldPreferences);"
229, PreviewPreferences previewPreferences = Globals.prefs.getPreviewPreferences();
230," XFootnote footer = UnoRuntime.queryInterface(XFootnote.class, range.getText());"
231, private static void ensureCorrectJavaVersion() {
232,"        typeSubscription = EasyBind.subscribe(this.entry.typeProperty(), type -> {"
233, continue;
234, public static Optional<String> getSuffix(final String link) {
235, return Optional.empty();
236," private final List<String> columnHeadings = Arrays.asList(Localization.lang(""Field""),"
237," XTextContent xTextContent = UnoRuntime.queryInterface(XTextContent.class, bookmark);"
238," public void editAbbreviation(String name, String abbreviation) {"
239, private void updateMergedEntry() {
240,            panel.setSaving(false);
241, if (exporter != null) {
242,            } else if (answer == DuplicateResolverDialog.DuplicateResolverResult.KEEP_MERGE) {
243,public class UndoableInsertEntry extends AbstractUndoableJabRefEdit {
244, public void storeSettings() {
245," protected abstract boolean isMatch(T suggestion, ISuggestionRequest request);"
246, final boolean namesNatbib = Globals.prefs.getBoolean(JabRefPreferences.NAMES_NATBIB); //MK:
247," public void insertEntry(List<BibEntry> entries, BibDatabase database,"
248, MetaData metaData = panel.getBibDatabaseContext().getMetaData();
249,            cleanUpMovePDF.setDisable(true);
250," Field privatePopup = AutoCompletionBinding.class.getDeclaredField(""autoCompletionPopup"");"
251, if (newGroups.getGroup() instanceof AllEntriesGroup) {
252,class OOBibBase {
253, if (!handleMultipleAppInstances(arguments) || argumentProcessor.shouldShutDown()) {
254, public void about() {
255, public JabRefIcon getTypeIcon() {
256,            selectedFieldName.ifPresent(this::requestFocus);
257, public abstract int getPageNumber();
258, String suffix;
259,"        browser.getEngine().getLoadWorker().progressProperty().addListener((observable, oldValue, newValue) -> {"
260, for (Field field : jointFields) {
261," boolean citePressed = dialogService.showConfirmationDialogAndWait(Localization.lang(""Cite""),"
262," String quotePath = ""\"""" + filePath + ""\"""";"
263,public class AbbreviationsFileViewModel {
264,"            xCursorProps.setPropertyValue(""CharLocale"", new Locale(""zxx"", """", """"));"
265,"        info.getChildren().setAll(icon, link, desc, progressIndicator);"
266,        }
267, private Optional<BibEntry> entry = Optional.empty();
268," String[] allParams = {viewModel.getLocalization(), params[0], params[1]};"
269,            background.setWidth(getDesiredWidth());
270,"        setGraphic(menu, action);"
271,class UndefinedCharacterFormatException extends Exception {
272," <V> Future<?> schedule(BackgroundTask<V> task, long delay, TimeUnit unit);"
273," REMOVE_ROW(MaterialDesignIcon.SERVER_MINUS) /*css: server-minus */,"
274,public class AutoLinkFilesAction extends SimpleCommand {
275," public static XComponentContext createInitialComponentContext(Hashtable<String, Object> context_entries) throws Exception {"
276,    requires java.desktop;
277,    requires java.prefs;
278,    requires java.annotation;
279,    requires org.jabref.thirdparty.libreoffice;
280,public class DatabaseChangeEvent {
281,}
282,public interface DatabaseChangeListener {
283,public class DatabaseChangeRegistration {
284,    }
285," SearchQuery searchQuery = new SearchQuery(""Journal Title 500"", false, false);"
286," SearchQuery searchQuery = new SearchQuery(""Journal Title 500"", false, false);"
287,public class OracleConnection implements Connection {
288,public class OracleDriver {
289,public class OracleStatement {
290,package oracle.jdbc;
291,}
292,public @interface ApacheCommonsLang3Allowed {
293, String value();
294, System.out.println(new AuxParserResultViewModel(result).getInformation(true));
295,public enum BasePanelMode {
296, public void setContent(ClipboardContent content) {
297, public String getContents() {
298, private static Optional<ParserResult> importToOpenBase(String argument) {
299, private Optional<ParserResult> fetch(String fetchCommand) {
300, try {
301," System.out.println(Localization.lang(""Importing in unknown format"") + "": "" + file);"
302, if (cli.isPreferencesReset()) {
303, if (cli.isPreferencesImport()) {
304, List<ParserResult> loaded = importAndOpenFiles();
305, ParserResult pr = loaded.get(loaded.size() - 1);
306, if (!matches.isEmpty()) {
307, switch (data.length) {
308,"                    formatName = ""tablerefsabsbib"";"
309, Optional<Exporter> exporter = Globals.exportFactory.getExporterByName(formatName);
310," boolean bibExtension = aLeftOver.toLowerCase(Locale.ENGLISH).endsWith(""bib"");"
311, if (startupMode == Mode.INITIAL_START) {
312, if ((newBase != null) && newBase.hasEntries()) {
313, if (fileWriter.hasEncodingProblems()) {
314, if (!loaded.isEmpty()) {
315, ParserResult pr = loaded.get(loaded.size() - 1);
316, File theFile = pr.getFile().get();
317,    }
318, return;
319, public SuggestionProviders getSuggestionProviders() {
320, private void copyCitationToClipboard(CitationStyleOutputFormat outputFormat) {
321, public void delete(boolean cut) {
322, public void runCommand(final Actions command) {
323, public void insertEntry(final BibEntry bibEntry) {
324, private void setupAutoCompletion() {
325, public void showAndEdit(BibEntry entry) {
326, public void clearAndSelect(final BibEntry bibEntry) {
327, public void entryEditorClosing() {
328, private void ensureNotShowingBottomPanel(BibEntry entry) {
329, private void saveDividerLocation(Number position) {
330, public List<BibEntry> getSelectedEntries() {
331, public void setCurrentSearchQuery(Optional<SearchQuery> currentSearchQuery) {
332, private class SearchAutoCompleteListener {
333, private class SearchListener {
334," private final Map<Actions, BaseAction> actions = new HashMap<>();"
335, private BasePanelMode mode = BasePanelMode.SHOWING_NOTHING;
336, private PersonNameSuggestionProvider searchAutoCompleter;
337, private BibEntry showing;
338, private Optional<SearchQuery> currentSearchQuery = Optional.empty();
339, this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());
340, this.bibDatabaseContext.getDatabase().registerListener(this);
341," String changeFlag = isModified() && !isAutosaveEnabled ? ""*"" : """";"
342,                    title.append('*');
343,"        actions.put(Actions.COPY, this::copy);"
344,"        actions.put(Actions.PASTE, this::paste);"
345,"        actions.put(Actions.COPY_KEY, this::copyKey);"
346,"        actions.put(Actions.COPY_TITLE, this::copyTitle);"
347,"        actions.put(Actions.COPY_CITE_KEY, this::copyCiteKey);"
348,"        actions.put(Actions.COPY_KEY_AND_LINK, new CopyBibTeXKeyAndLinkAction(mainTable, Globals.clipboardManager));"
349, List<String> titles = selectedBibEntries.stream()
350,"                output(Localization.lang(""Copied"") + "" '"" + JabRefDialogService.shortenDialogMessage(copiedTitles) + ""'."");"
351, for (BibEntry be : bes) {
352,"                output(Localization.lang(""Copied"") + "" '"" + JabRefDialogService.shortenDialogMessage(copiedCiteCommand) + ""'."");"
353, for (BibEntry be : bes) {
354,"                output(Localization.lang(""Copied"") + "" '"" + JabRefDialogService.shortenDialogMessage(copiedKeys) + ""'."");"
355," StringReader sr = new StringReader(""\\bibtexkey - \\begin{title}\\format[RemoveBrackets]{\\title}\\end{title}\n"");"
356, for (BibEntry be : bes) {
357,"                output(Localization.lang(""Copied"") + "" '"" + JabRefDialogService.shortenDialogMessage(copiedKeysAndTitles) + ""'."");"
358," UpdateField.setAutomaticFields(bibEntry, true, true, Globals.prefs.getUpdateFieldPreferences());"
359,"                getUndoManager().addEdit(new UndoableInsertEntry(bibDatabaseContext.getDatabase(), bibEntry));"
360, if (Globals.prefs.getBoolean(JabRefPreferences.AUTO_OPEN_FORM)) {
361,            entryEditor.setFocusToField(field);
362,        mainTable.addSelectionListener(listEvent -> Globals.stateManager.setSelectedEntries(mainTable.getSelectedEntries()));
363,        mainTable.addSelectionListener(event -> mainTable.getSelectedEntries()
364, /*
365,        createMainTable();
366,        instantiateSearchAutoCompleter();
367,"        dividerPositionSubscription = EasyBind.monadic(Bindings.valueAt(splitPane.getDividers(), 0))"
368,            resetChangeMonitorAndChangePane();
369, this.baseChanged = true;
370, CoarseChangeFilter changeFilter = new CoarseChangeFilter(bibDatabaseContext);
371,            suggestionProviders = new SuggestionProviders();
372,        frame.setWindowTitle();
373, FileFinder fileFinder = FileFinders.constructFromConfiguration(Globals.prefs.getAutoLinkPreferences());
374, if (Globals.prefs.getBoolean(JabRefPreferences.AUTO_ASSIGN_GROUP)) {
375, DefaultTaskExecutor.runInJavaFXThread(() -> frame.getGlobalSearchBar().performSearch());
376, List<LinkedFile> files = bes.get(0).getFiles();
377,public class CrossrefFetcherEvaluator {
378, private static Object createDependency(Class<?> clazz) {
379, Injector.setInstanceSupplier(DefaultInjector::createDependency);
380,public interface DialogService {
381," <T> Optional<T> showChoiceDialogAndWait(String title, String content, String okButtonLabel, T defaultChoice, Collection<T> choices);"
382," Optional<String> showInputDialogAndWait(String title, String content);"
383," Optional<String> showInputDialogWithDefaultAndWait(String title, String content, String defaultValue);"
384," void showInformationDialogAndWait(String title, String content);"
385," void showWarningDialogAndWait(String title, String content);"
386," void showErrorDialogAndWait(String title, String content);"
387," void showErrorDialogAndWait(String message, Throwable exception);"
388," void showErrorDialogAndWait(String title, String content, Throwable exception);"
389, void showErrorDialogAndWait(String message);
390," boolean showConfirmationDialogAndWait(String title, String content);"
391," boolean showConfirmationDialogAndWait(String title, String content, String okButtonLabel);"
392," boolean showConfirmationDialogAndWait(String title, String content, String okButtonLabel, String cancelButtonLabel);"
393," boolean showConfirmationDialogWithOptOutAndWait(String title, String content,"
394," boolean showConfirmationDialogWithOptOutAndWait(String title, String content,"
395, <R> Optional<R> showCustomDialogAndWait(Dialog<R> dialog);
396," <V> void showProgressDialogAndWait(String title, String content, Task<V> task);"
397, void notify(String message);
398, Optional<Path> showFileSaveDialog(FileDialogConfiguration fileDialogConfiguration);
399, Optional<Path> showFileOpenDialog(FileDialogConfiguration fileDialogConfiguration);
400, List<Path> showFileOpenDialogAndGetMultipleFiles(FileDialogConfiguration fileDialogConfiguration);
401, Optional<Path> showDirectorySelectionDialog(DirectoryDialogConfiguration directoryDialogConfiguration);
402, boolean showPrintDialog(PrinterJob job);
403, Optional<Path> showFileOpenFromArchiveDialog(Path archivePath) throws IOException;
404,public class DragAndDropDataFormats {
405,public class EntryTypeView extends BaseDialog<EntryType> {
406, return type;
407,        bibTexTitlePane.managedProperty().bind(bibTexTitlePane.visibleProperty());
408, break;
409,public class FXDialog extends Alert {
410, public static JournalAbbreviationLoader journalAbbreviationLoader;
411, public static ProtectedTermsLoader protectedTermsLoader;
412, public static ClipBoardManager clipboardManager = new ClipBoardManager();
413, public static final RemoteListenerServerLifecycle REMOTE_LISTENER = new RemoteListenerServerLifecycle();
414, public static JabRefPreferences prefs;
415, private static KeyBindingRepository keyBindingRepository;
416, public static synchronized KeyBindingRepository getKeyPrefs() {
417, public static void startBackgroundTasks() throws JabRefException {
418, SDKShutdownActivity.INSTANCE.stopAll();
419,public class GUIGlobals {
420, public static void init() {
421, public static final int WIDTH_ICON_COL_RANKING = 5 * 16; // Width of Ranking Icon Column
422," public static final String UNTITLED_TITLE = Localization.lang(""untitled"");"
423, GUIGlobals.updateEntryEditorColors();
424," Globals.prefs.putInt(JabRefPreferences.FONT_SIZE, size);"
425, private static final Logger LOGGER = LoggerFactory.getLogger(JabRefCLI.class);
426,"        options.addOption(""h"", ""help"", false, Localization.lang(""Display help on command line options""));"
427,public class JabRefDialogService implements DialogService {
428,        alert.getDialogPane().applyCss();
429,        alert.setDialogPane(new DialogPane() {
430,        alert.getDialogPane().setExpandableContent(new Group());
431,public class JabRefLauncher {
432,public class SidePane extends BorderPane {
433, public void beforeClosing() {
434, public void afterOpening() {
435,    }
436, return null;
437, return false;
438, return null;
439, return null;
440, return null;
441, return null;
442,    }
443, return false;
444,    }
445,    }
446,    }
447, return false;
448, return null;
449,    }
450, return false;
451,    }
452, return null;
453,    }
454, return 0;
455, return null;
456,    }
457, return null;
458, return null;
459, return null;
460, return null;
461,    }
462,    }
463, return 0;
464, return null;
465, return null;
466,    }
467,    }
468, return null;
469, return null;
470, return null;
471, return null;
472, return null;
473, return null;
474, return null;
475, return null;
476, return null;
477, return null;
478, return false;
479,    }
480,    }
481, return null;
482, return null;
483, return null;
484, return null;
485,    }
486, return null;
487,    }
488,    }
489, return 0;
490," public void savePartOfDatabase(BibDatabaseContext bibDatabaseContext, List<BibEntry> entries) throws IOException {"
491,public class AutosaveEvent {
492, private final DuplicationChecker duplicationChecker = new DuplicationChecker();
493," protected void writeMetaData(MetaData metaData, GlobalBibtexKeyPattern globalCiteKeyPattern) throws IOException {"
494, public boolean hasEntries() {
495, public boolean containsEntryWithId(String id) {
496, public Set<Field> getAllVisibleFields() {
497, public synchronized List<BibEntry> getEntriesByKey(String key) {
498," public synchronized boolean insertEntry(BibEntry entry, EntryEventSource eventSource) throws KeyCollisionException {"
499, public synchronized void removeEntry(BibEntry toBeDeleted) {
500, public synchronized void setPreamble(String preamble) {
501, public void removeString(String id) {
502, public BibtexString getString(String id) {
503, public boolean hasNoStrings() {
504, public void copyPreamble(BibDatabase database) {
505," public BibEntry resolveForStrings(BibEntry entry, boolean inPlace) {"
506, Optional<Month> month = Month.getMonthByShortName(label);
507, for (BibEntry entry : toChange) {
508,                    newRes.append(res.substring(next));
509, private Optional<Path> file;
510, public Optional<Path> getFirstExistingFileDir(FilePreferences preferences) {
511,        comparators.add(new CrossRefEntryComparator());
512, return getFileDirectories(preferences).stream()
513,        preferences.getFileDirectory(field).ifPresent(path -> fileDirs.add(path.toAbsolutePath().toString()));
514,                relDir = databaseFile.get().getParent();
515, public BibDatabaseMode getOppositeMode() {
516, private T parent;
517, private T child;
518, public Optional<T> getParent() {
519, public boolean isAncestorOf(T anotherNode) {
520, public void addAtEnd(T node) {
521,public abstract class ChainNode<T extends ChainNode<T>> {
522,public class CoarseChangeFilter {
523,"        uriBuilder.addParameter(""within"", ""owners.owner=GUIDE""); // Search within the ACM Guide to Computing Literature (encompasses the ACM Full-Text Collection)"
524, Set<BibEntryType> typesToWrite = new HashSet<>();
525,public class DatabaseNotSupportedException extends Exception {
526, if (preferences.getSaveType() != SavePreferences.DatabaseSaveType.PLAIN_BIBTEX) {
527, private boolean isDuplicateCiteKeyExisting(String citeKey) {
528, private void removeKeyFromSet(String key) {
529," private List<FieldChange> cleanupSingleField(Field fieldKey, BibEntry entry) {"
530, public TreeNode(Class<T> derivingClass) {
531, private final ObservableList<T> children;
532, private T parent;
533, public int getPositionInParent() {
534, public int getLevel() {
535, public List<T> getPathFromRoot() {
536, public Optional<T> getPreviousSibling() {
537, protected boolean childIndexExists(int index) {
538," if (entryTypesManager.isCustomType(entry.getType(), bibDatabaseContext.getMode())) {"
539, public void removeFromParent() {
540,"                entryTypesManager.enrich(entry.getType(), bibDatabaseContext.getMode()).ifPresent(typesToWrite::add);"
541," public void sortChildren(Comparator<? super T> comparator, boolean recursive) {"
542," public void moveTo(T target, int targetIndex) {"
543, public T copySubtree() {
544,        }
545, public static void runMigrations() {
546, private static void upgradeFaultyEncodingStrings(JabRefPreferences prefs) {
547, private static void upgradeSortOrder(JabRefPreferences prefs) {
548,            writeEntryTypeDefinitions(typesToWrite);
549," if (mainPrefsNode.get(JabRefPreferences.DEFAULT_BIBTEX_KEY_PATTERN, null) == null) {"
550, if (mainPrefsNode.nodeExists(JabRefPreferences.BIBTEX_KEY_PATTERNS_NODE)) {
551,        writeEpilogue(bibDatabaseContext.getDatabase().getEpilog());
552, public abstract String getKey();
553, public abstract String format(String value);
554,public class ACS implements FulltextFetcher {
555, @Override
556, if (!groupedByField.containsKey(key)) {
557, List<String> formattersForKey = groupedByField.get(key);
558, StringBuilder result = new StringBuilder();
559, String content = bibtexString.getContent();
560,public class BiblioscapeImporter extends Importer {
561,            }
562," if (""------"".equals(line)) {"
563,                    }
564, for (int i = 1; (i >= 0) && BibEntry.DEFAULT_TYPE.equals(bibtexType); --i) {
565, if (bibtexType.equals(StandardEntryType.Article)) {
566, if (address != null) {
567,"                    hm.put(StandardField.COMMENT, String.join("";"", comments));"
568," public static Optional<BibEntry> getEntry(String entryUrl, ImportFormatPreferences importFormatPreferences) {"
569, for (BibtexString original : originalDatabase.getStringValues()) {
570," if (!Objects.equals(original.getContent(), match.get().getContent())) {"
571,"                    differences.add(new BibStringDiff(original, match.get()));"
572,                notMatched.add(original);
573, for (Iterator<BibtexString> iterator = notMatched.iterator(); iterator.hasNext(); ) {
574,        newDatabase.getStringValues().stream()
575," private int convertSpecialChar(StringBuilder sb, char[] c, int start, FORMAT_MODE format) {"
576, Document html = Jsoup.connect(source).ignoreHttpErrors(true).get();
577," public static Optional<String> findSpecialChar(char[] c, int pos) {"
578," ALL_LOWERS('l'),"
579, if (preferences.isSaveInOriginalOrder()) {
580, while ((i < c.length) && (braceLevel > 0)) {
581," Optional<String> s = BibtexCaseChanger.findSpecialChar(c, i);"
582, @Override
583,public class ChangeCaseFunction implements BstFunction {
584, for (Field field : FIELDS) {
585," public static List<BibEntry> getSortedEntries(BibDatabaseContext bibDatabaseContext, List<BibEntry> entriesToSort, SavePreferences preferences) {"
586,public class DiVA implements IdBasedParserFetcher {
587,public class DoiResolution implements FulltextFetcher {
588, if (!sciLink.isEmpty()) {
589,                    connection.timeout(10000);
590," if ((href.contains(""pdf"") || hrefText.contains(""pdf"")) && new URLDownload(href).isPdf()) {"
591, if (links.size() == 1) {
592, public List<String> getValue(EntryType entryType) {
593,        row.startFullDrag();
594," public static List<Field> SUPPORTED_FIELDS = Arrays.asList(StandardField.DOI, StandardField.EPRINT, StandardField.ISBN);"
595,            } else {
596,            } else {
597, public static final String[] getDefaultOptions() {
598, boolean disable_dynloading = false;
599," private XTextRange getBookmarkRange(String name) throws NoSuchElementException, WrappedTargetException {"
600,        text = mxDoc.getText();
601, throw new ConnectionLostException(ex.getMessage());
602,public class SidePaneManager {
603, for (int j = 0; j < cEntries.length; j++) {
604,"        text.insertTextContent(position, xTextContent, true);"
605, Optional<String> pageInfo = getCustomProperty(name);
606," XTextContent xTextContent = UnoRuntime.queryInterface(XTextContent.class, bookmark);"
607," XBookmarksSupplier xBookmarksSupplier = UnoRuntime.queryInterface(XBookmarksSupplier.class, xCurrentComponent);"
608," String bName = getUniqueReferenceMarkName(keyString, OOBibBase.AUTHORYEAR_PAR);"
609,                    resultDatabase.insertEntry(clonedEntry);
610, if (!emptyKeys) {
611, Optional<Path> actualFile = chooseAmongInstallations(installations);
612,class ConnectionLostException extends RuntimeException {
613,public class PreferencesDialogView extends BaseDialog<PreferencesDialogViewModel> {
614," private void jumpToSearchKey(ListView<PreviewLayout> list, KeyEvent keypressed) {"
615, private class PreferredIndexSort implements Comparator<SidePaneComponent> {
616, void setValues();
617, for (PreferencesTab tab : preferenceTabs) {
618, HBox themeBox = new HBox();
619, boolean validateSettings();
620," Label keyGeneratorSettings = new Label(Localization.lang(""Key generator settings""));"
621, public StringProperty mainFileDirProperty() { return mainFileDirProperty; }
622,public class StateManager {
623,"                    fileLinker.moveFilesToFileDirAndAddToEntry(entry, files);"
624, return menu;
625, boolean requiresBibtexKeys();
626,"                    prefix.concat(""\"""" + getCiteCommand().replaceAll(""\\\\"", ""\\\\\\\\"") + ""{"" + keys + ""}\"""").concat(suffix);"
627, try {
628,        base.setPreamble(newValue);
629, ViewLoader.view(this)
630, private final boolean separationBySpace;
631,                        setOnContextMenuRequested(event -> {
632,public class OnlyIntegerFormatter extends TextFormatter<Integer> {
633," private static PseudoClass dragOverBottom = PseudoClass.getPseudoClass(""dragOver-bottom"");"
634,            row.setOnContextMenuRequested(event -> {
635,public class TooltipTextUtil {
636, <V> Future<V> execute(Task<V> task);
637, void shutdown();
638, return true;
639,public class AutoCompleteUpdater {
640, final CountDownLatch doneLatch = new CountDownLatch(1);
641, private StringConverter<T> converter;
642, public BackgroundTask<Void> thenRun(Consumer<V> nextOperation) {
643, boolean openFolders = JabRefPreferences.getInstance().getBoolean(JabRefPreferences.OPEN_FOLDERS_OF_ATTACHED_FILES);
644, public void addPossibleSuggestions(Collection<T> newPossible) {
645," private final Map<Field, AutoCompleteSuggestionProvider<?>> providers = new HashMap<>();"
646,public class WordSuggestionProvider extends StringSuggestionProvider implements AutoCompleteSuggestionProvider<String> {
647, int columnsNumber = 2;
648, public BasePanel getBasePanelAt(int i) {
649,public class CopyFilesResultListDependency {
650,    }
651, /*
652," void openPdfWithParameters(String filePath, List<String> parameters) throws IOException;"
653, if (!file.isPresent() || !Files.exists(file.get())) {
654,"                command = command.replace(""%DIR"", absolutePath);"
655," EasyBind.subscribe(currentPage, this::showPage);"
656,"            viewModel.getKeywords().set(event.getTablePosition().getRow(), event.getNewValue());"
657," Optional<FieldChange> change = entry.putKeywords(keywords, preferences.getKeywordDelimiter());"
658," for (Map.Entry<Field, String> field : outOfFocusEntry.getFieldMap().entrySet()) {"
659," if (!Objects.equals(newEntry.getType(), outOfFocusEntry.getType())) {"
660, return Collections.emptySortedSet();
661, private StackPane getRelatedArticlesPane(BibEntry entry) {
662," LOGGER.debug(""Mode MOVE"");"
663,"        entryEditorTabs.add(new RequiredFieldsTab(databaseContext, panel.getSuggestionProviders(), undoManager, dialogService));"
664,        entryEditorTabs.add(new MathSciNetTab());
665, if (typeSubscription != null) {
666, private EntryType currentEntryType;
667, protected void handleFocus() {
668,        content.textProperty().bind(EasyBind.select(viewModel.currentAnnotationProperty()).selectObject(FileAnnotationViewModel::contentProperty));
669, public void copyCurrentAnnotation() {
670, public void reportIssue() {
671, Globals.prefs.fileDirForDatabase = panel.getBibDatabaseContext().getFileDirectoriesAsPaths(Globals.prefs.getFilePreferences()).stream().map(Path::toString).collect(Collectors.toList());
672,public class ExportCommand extends SimpleCommand {
673, Globals.prefs.fileDirForDatabase = frame.getCurrentBasePanel()
674," Globals.prefs.put(JabRefPreferences.LAST_USED_EXPORT, format.getName());"
675,                })
676, if (context.getLocation() == DatabaseLocation.SHARED) {
677,                        entriesToAdd = xmpEntriesInFile;
678, Files.createDirectories(destination.getParent());
679,public class FindUnlinkedFilesDialog extends BaseDialog<Void> {
680,        stateManager.activeDatabaseProperty().bind(
681," return node.path.getFileName() + "" ("" + node.fileCount + "" file"" + (node.fileCount > 1 ? ""s"" : """") + "")"";"
682, VBox panelDirectory = new VBox(5);
683," EasyBind.subscribe(stateManager.activeSearchQueryProperty(),"
684, public Optional<ExternalFileType> getExternalFileTypeForName(String filename) {
685, List<ExternalFileType> defTypes = new ArrayList<>(getDefaultExternalFileTypes());
686, ExternalFileType toRemove = null;
687,                types.add(type);
688,            setWindowTitle();
689, Optional<ExternalFileType> mimeType = getExternalFileTypeByMimeType(linkedFile.getFileType());
690, return FileHelper.getFileExtension(linkedFile.getLink())
691, public static ExternalFileType buildFromArgs(String[] val) {
692, public void storeSettings() {
693, if (link.substring(index + 1).indexOf('/') >= 1) {
694, void addToContextMenu(final Supplier<List<MenuItem>> items);
695, try {
696,        );
697,        taskExecutor.execute(writeTask);
698, if (!suggestedType.isPresent()) {
699," @SuppressWarnings(""unchecked"")"
700, public static Supplier<List<MenuItem>> getDOIMenu(TextArea textArea) {
701,public class FileListEntry {
702,class UndoableMoveGroup extends AbstractUndoableJabRefEdit {
703, for (int i = 0; i < tabbedPane.getTabs().size(); i++) {
704," PseudoClass anySelected = PseudoClass.getPseudoClass(""any-selected"");"
705,        m_pathToNode = editedNode.getNode().getIndexedPathFromRoot();
706, for (int i = 0; i < (m_pathToNode.size() - 1); ++i) {
707, private final List<GroupTreeNode> m_modifiedSubtree = new ArrayList<>();
708," public UndoableModifySubtree(GroupTreeNodeViewModel groupRoot,"
709, final GroupTreeNode subtreeRoot = m_groupRoot.getDescendant(m_subtreeRootPath).get(); //TODO: NULL
710,class GroupDialog extends BaseDialog<AbstractGroup> {
711, HBox mainPanel = new HBox(15);
712,                                warnAboutSameName = true;
713, if (editedGroup == null) {
714,public class GroupSidePane extends SidePaneComponent {
715,    }
716, if (targetParent.equals(getParent())) {
717, boolean keepPreviousAssignments = dialogService.showConfirmationDialogAndWait(
718, boolean removePreviousAssignments = (oldGroup.getGroupNode().getGroup() instanceof ExplicitGroup)
719," private static final Set<String> AVAILABLE_LANG_FILES = Stream.of(""en"", ""de"", ""fr"", ""in"", ""ja"")"
720, return false;
721,public class ErrorConsoleAction extends SimpleCommand {
722," OPEN(MaterialDesignIcon.FOLDER_OUTLINE) /*css: folder */,"
723," READ_STATUS_SKIMMED(Color.ORANGE, MaterialDesignIcon.EYE), /*css: eye */"
724, TextInputControl textInput = (TextInputControl) focusOwner;
725," TOGGLE_GROUPS(MaterialDesignIcon.VIEW_LIST), /*css: view-list */"
726," WRITE_XMP(MaterialDesignIcon.IMPORT), /* css: import */"
727," REG_EX(MaterialDesignIcon.REGEX), /*css: mdi-regex */"
728," FORUM(MaterialDesignIcon.FORUM), /* css: forum */"
729, break;
730,"        jabRefFrame.getDialogService().showWarningDialogAndWait(dialogTitle, dialogContent.toString());"
731,"                    imports.add(Globals.IMPORT_FORMAT_READER.importUnknownFormat(filename, Globals.getFileUpdateMonitor()));"
732, ParserResult pr = importResult.parserResult;
733," UpdateField.setAutomaticFields(entries, Globals.prefs.getUpdateFieldPreferences()); // set timestamp and owner"
734,                entries.add(dialog.getMergedEntry());
735, boolean overwriteOwner = Globals.prefs.getBoolean(JabRefPreferences.OVERWRITE_OWNER);
736, boolean isActionNecessary(ParserResult pr);
737," public void openFile(Path file, boolean raisePanel) {"
738, private static final List<GUIPostOpenAction> POST_OPEN_ACTIONS = Arrays.asList(
739,"                openTheFile(theFile, raisePanel);"
740, else if (toRaise != null) {
741,public class AbbreviateAction implements BaseAction {
742,public class UnabbreviateAction implements BaseAction {
743, UndoableUnabbreviator undoableAbbreviator = new UndoableUnabbreviator(Globals.journalAbbreviationLoader
744," public class JournalAbbreviationsAbbreviationTableEditingCell extends TableCell<AbbreviationViewModel, String> {"
745," public boolean unabbreviate(BibDatabase database, BibEntry entry, Field field, CompoundEdit ce) {"
746," TABLE_ICONS.put(SpecialField.QUALITY, icon);"
747," TABLE_ICONS.put(SpecialField.RANKING, icon);"
748, final JabRefPreferences preferences = JabRefPreferences.getInstance();
749," Class<?> clazz = Class.forName(""javafx.scene.control.TableUtil"");"
750, if (preferences.resizeColumnsToFit()) {
